#!/bin/bash
source $HOME/.config/teiler/config

if [[ ! -d $HOME/.config/teiler/uploader ]]; then
    mkdir $HOME/.config/teiler/uploader
    cp /usr/share/doc/teiler/uploader/* $HOME/.config/teiler/uploader
fi

mainMenu () {
    filename="$(cat /tmp/__teiler_cast_name)"
    isRecording && STATE_RECORDING="2 Stop Recording Screencast"
    if [[ "$STATE_RECORDING" == "2 Stop Recording Screencast" ]]; then
        HELP="<span color='$help_color'>Alt+1: Upload | Alt+2: No Upload</span>"
        menu=$(echo -e "< Exit\n---\n"$STATE_RECORDING"" | rofi -dmenu -u 2 -mesg "${HELP}" -p "teiler > ")
        val=$?
        if [[ $val -eq 10 ]]; then isRecording && stopRecording && sleep 2 && cd "${vid_path}" && teiler_helper --upload video "${filename}";
        elif [[ $val -eq 11 ]]; then isRecording && stopRecording; rm -f /tmp/__teiler_cast_name; exit
        elif [[ $val -eq 1 ]]; then exit;
        elif [[ $val -eq 0 ]]; then
            if [[ $always_ul == "1" ]]; then isRecording && stopRecording && sleep 2 && cd "${vid_path}" && teiler_helper --upload video "${filename}";
            elif [[ $always_ul == "0" ]]; then isRecording && stopRecording; fi
        fi

    elif [[ -z "$STATE_RECORDING" ]]; then
        menu=$(echo -e "< Exit\n---\n1 [ Screenshots ]>\n2 [ Screencasts ]>\n3 [ History ]>\n---\n4 Pastebin Text from Clipboard" | rofi -dmenu -p "teiler > ")
        val=$?
        if [[ $menu == "1 [ Screenshots ]>" ]]; then screenshotMenu;
        elif [[ $menu == "2 [ Screencasts ]>" ]]; then screencastMenu;
        elif [[ $menu == "3 [ History ]>" ]]; then uploadMenu;
        elif [[ $menu == "4 Pastebin Text from Clipboard" ]]; then export filename="${paste_filemask}" && clipCmd && teiler_helper --upload text "${filename}";
        elif [[ $val -eq 1 ]]; then exit; fi
    fi
}

screenshotMenu () {
    HELP="<span color='$help_color'>Alt+1: Upload             | Alt+2: No Upload
Alt+Shift+1: Delay+Upload | Alt+Shift+2: Delay+No Upload</span>"

    if [[ -z $delay ]]; then delay="0"; fi

    menu=$(echo -e "< Return to Main Menu\n---\n1 Fullscreen\n2 Fullscreen (All Monitors)\n3 Area" | rofi -dmenu -kb-custom-3 "Alt+Shift+1" -kb-custom-4 "Alt+Shift+2" -mesg "${HELP}" -p "Screenshot > ")
    val=$?
    export filename="${img_filemask}"
    if [[ $menu == "< Return to Main Menu" ]]; then mainMenu;
    elif [[ $menu == "1 Fullscreen" ]]; then
        if [[ $val -eq 10 ]]; then maimCmd nodelay fullscreen "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
        elif [[ $val -eq 11 ]]; then maimCmd nodelay fullscreen "${filename}" && exit
        elif [[ $val -eq 12 ]]; then delayPrompt && notify-send -t 1 "teiler" "Taking Screenshot in "$delay" seconds" && maimCmd delay fullscreen "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
        elif [[ $val -eq 13 ]]; then delayPrompt && notify-send -t 1 "teiler" "Taking Screenshot in "$delay" seconds" && maimCmd delay fullscreen "${filename}" && exit
        elif [[ $val -eq 1 ]]; then exit
        elif [[ $val -eq 0 ]]; then
            if [[ $always_ul == "1" ]]; then maimCmd nodelay fullscreen "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
            elif [[ $always_ul == "0" ]]; then maimCmd nodelay fullscreen "${filename}"
            fi
        fi

    elif [[ $menu == "2 Fullscreen (All Monitors)" ]]; then
        if [[ $val -eq 10 ]]; then maimCmd nodelay fullscreenAll "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
        elif [[ $val -eq 11 ]]; then maimCmd nodelay fullscreenAll "${filename}" && exit
        elif [[ $val -eq 12 ]]; then delayPrompt && notify-send -t 1 "teiler" "Taking Screenshot in "$delay" seconds" && maimCmd delay fullscreenAll "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
        elif [[ $val -eq 13 ]]; then delayPrompt && notify-send -t 1 "teiler" "Taking Screenshot in "$delay" seconds" && maimCmd delay fullscreenAll "${filename}" && exit
        elif [[ $val -eq 1 ]]; then exit
        elif [[ $val -eq 0 ]]; then
            if [[ $always_ul == "1" ]]; then maimCmd nodelay fullscreenAll "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
            elif [[ $always_ul == "0" ]]; then maimCmd nodelay fullscreenAll "${filename}"
            fi
        fi

    elif [[ $menu == "3 Area" ]]; then
        if [[ $val -eq 10 ]]; then maimCmd nodelay area "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
        elif [[ $val -eq 11 ]]; then maimCmd nodelay area "${filename}" && exit
        elif [[ $val -eq 12 ]]; then delayPrompt && notify-send -t 1 "teiler" "Taking Screenshot in "$delay" seconds" && maimCmd delay area "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
        elif [[ $val -eq 13 ]]; then delayPrompt && notify-send -t 1 "teiler" "Taking Screenshot in "$delay" seconds" && maimCmd delay area "${filename}" && exit
        elif [[ $val -eq 1 ]]; then exit
        elif [[ $val -eq 0 ]]; then
            if [[ $always_ul == "1" ]]; then maimCmd nodelay area "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}" && exit
            elif [[ $always_ul == "0" ]]; then maimCmd nodelay area "${filename}"
            fi
        fi
    elif [[ $menu == "< Return to Main Menu" ]]; then
        mainMenu
    fi
    echo "${filename}" > $HOME/.config/teiler/last_image
}

screencastMenu () {
    filename="$(cat /tmp/__teiler_cast_name)"
    isRecording && STATE_RECORDING="2 Stop Recording Screencast"
    if [[ "$STATE_RECORDING" == "2 Stop Recording Screencast" ]]; then
        HELP="<span color='$help_color'>Alt+1: Upload | Alt+2: No Upload</span>"
        menu=$(echo -e "< Exit\n---\n"$STATE_RECORDING"" | rofi -dmenu -u 2 -mesg "${HELP}" -p "teiler > ")
        val=$?
        if [[ "$menu" == "< Exit" ]]; then
            exit
        fi
        if [[ $val -eq 10 ]]; then isRecording && stopRecording && sleep 2 && cd "${vid_path}" && teiler_helper --upload video "${filename}" && rm -f /tmp/__teiler_cast_name;
        elif [[ $val -eq 11 ]]; then isRecording && stopRecording; rm -f /tmp/__teiler_cast_name; exit
        elif [[ $val -eq 1 ]]; then exit
        elif [[ $val -eq 0 ]]; then
            if [[ $always_ul ]]; then isRecording && stopRecording && sleep 2 && cd "${vid_path}" && teiler_helper --upload video "${filename}";
            elif [[ $always_ul == "0" ]]; then isRecording && stopRecording; rm -f /tmp/__teiler_cast_name; exit
            fi
        fi

    elif [[ -z "$STATE_RECORDING" ]]; then
        menu=$(echo -e "< Return to Main Menu\n---\n1 Fullscreen\n2 Area" | rofi -dmenu -p "Screenshot > ")
        val=$?
        filename="${vid_filemask}"
        echo "${filename}" > /tmp/__teiler_cast_name

        if [[ $menu == "1 Fullscreen" ]]; then isRecording && stopRecording && sleep 2 || ffmpegCmd fullscreen;
        elif [[ $menu == "2 Area" ]]; then isRecording && stopRecording && sleep 2 || ffmpegCmd area;
        elif [[ $menu == "" ]]; then exit;
        elif [[ $menu == "< Return to Main Menu" ]]; then mainMenu; fi
    fi
}

uploadMenu () {
    menu=$(echo -e "< Return to Main Menu\n---\n1 Images\n2 Videos" | rofi -dmenu -p "Uploads > ")
    if [[ $menu == "1 Images" ]]; then imageMenu;
    elif [[ $menu == "2 Videos" ]]; then videoMenu;
    elif [[ $menu == "< Return to Main Menu" ]]; then mainMenu;
    elif [[ $menu == "" ]]; then exit
    fi
}

imageMenu () {
    cd "${img_path}"
    HELP="<span color='$help_color'>Alt+1: View | Alt+2: Upload | Alt+3: Edit | Alt+4: Copy to Clipboard</span>"
    imagemenu=$(echo -e "< Return to Upload Menu\n---\n$(ls -1 -r)" | rofi -dmenu -select "${entry}" -mesg "${HELP}" -p "Choose > ")
    val=$?
    imagemenu2="${imagemenu%.*}"
    if [[ "${imagemenu}" == "< Return to Upload Menu" ]]; then uploadMenu; fi
    if [[ $val -eq 11 ]]; then teiler_helper --upload image "${imagemenu2}"; export entry="${imagemenu}"; imageMenu
    elif [[ $val -eq 10 || $val -eq 0 ]]; then $viewer "${imagemenu}"; export entry="${imagemenu}"; imageMenu
    elif [[ $val -eq 12 ]]; then
        cp "${imagemenu}" "${imagemenu2}-mod.png"
        $editor "${imagemenu2}-mod.png"
        export entry="${imagemenu}"
        imageMenu
    elif [[ $val -eq 13 ]]; then
        copyq
        copyq write image/png - < "${imagemenu}"; copyq \select 0
    elif [[ $val -eq 1 ]]; then exit;
    fi
}

videoMenu () {
    cd "${vid_path}"
    HELP="<span color='$help_color'>Alt+1: View | Alt+2: Upload</span>"
    videomenu=$(echo -e "< Return to Upload Menu\n---\n$(ls -1)" | rofi -dmenu -select "${entry}" -mesg "${HELP}" -p "Choose > ")
    val=$?
    videomenu2="${videomenu%.*}"
    if [[ "${videomenu}" == "< Return to Upload Menu" ]]; then uploadMenu; fi
    if [[ $val -eq 11 ]]; then teiler_helper --upload video "${videomenu}";
    elif [[ $val -eq 10 || $val -eq 0 ]]; then $player "${videomenu}"; export entry="${videomenu}"; videoMenu
    elif [[ $val -eq 1 ]]; then exit
    fi
}

isRecording () { [[ -f "$SCREENCAST_PIDFILE" ]] || return 1; }

stopRecording () {
    local pid
    [[ -f $SCREENCAST_PIDFILE ]] && { pid=$(cat "$SCREENCAST_PIDFILE"); pid2=$(cat "$INDICATOR_PIDFILE"); isRecording && kill "$pid" "$pid2"; rm "$SCREENCAST_PIDFILE"; rm "$INDICATOR_PIDFILE"; }
    notify-send -t "1" "teiler" "Stopped recording"; output=$(xininfo -name); xrandr --output "$output" --auto; return 0
}

ffmpegCmd () {
    if [[ $1 == "fullscreen" ]]; then
        isRecording && { notify "$time" 'Screencast already in progress'; echo "Already recording Screen"; exit 1; }
        ffmpeg_display=$(echo $DISPLAY)
        ffmpeg_offset=$(echo $(( $(xininfo -mon-x) -1 )),$(xininfo -mon-y))
        res_now="$(echo $(xininfo -mon-size | awk '{ print $1 }')x$(xininfo -mon-size | awk '{ print $2 }'))"
        if [[ $res_now == $res ]]; then echo " "
        else output=$(xininfo -name); xrandr --output "$output" --mode "$res"; sleep 5; fi
        [[ -f "${vid_path}/${filename}" ]] && rm "${vid_path}/${filename}"
        if [[ -z $ffaudio ]]; then $encoder -f x11grab -s $res -i $ffmpeg_display+$ffmpeg_offset $encopts "${vid_path}/${filename}" &
        else $encoder -f x11grab -s $res -i $ffmpeg_display+$ffmpeg_offset $ffaudio $encopts "${vid_path}/${filename}" &
        fi
        echo "$!" > "$SCREENCAST_PIDFILE"
        notify-send -t "1" "teiler" "Screencast started"
    elif [[ $1 == "area" ]]; then
        isRecording && { notify "$time" 'Screencast already in progress'; echo "Already recording Screen"; exit 1; }
        ffmpeg_display=$(echo $DISPLAY); ffmpeg_offset=$(echo $(xininfo -mon-x),$(xininfo -mon-y)); eval `slop -b "$slop_border" -c "$slop_color"`
        [[ -f "${vid_path}/${filename}" ]] && rm "${vid_path}/${filename}"
        if [[ -z $ffaudio ]]; then $encoder -f x11grab -s "$(( $W - 1))"x"$(( $H - 1))" -i $ffmpeg_display+$X,$Y $rect_encopts "${vid_path}/${filename}" &
        else $encoder -f x11grab -s "$(( $W -1 ))"x"$(( $H - 1 ))" -i $ffmpeg_display+$X,$Y $ffaudio $rect_encopts "${vid_path}/${filename}" &
        fi
        echo "$!" > "$SCREENCAST_PIDFILE"
        notify-send -t "1" "teiler" "Screencast started"
    fi
    indicator
}

maimCmd () {
    if [[ $1 == "delay" ]]; then
        if [[ $2 == "area" ]]; then maim -s -w $(xininfo -mon-width) -h $(xininfo -mon-height) -x $(xininfo -mon-x) -y $(xininfo -mon-y) -d ${delay} "${img_path}/${3}";
        elif [[ $2 == "fullscreen" ]]; then maim -w $(xininfo -mon-width) -h $(xininfo -mon-height) -x $(xininfo -mon-x) -y $(xininfo -mon-y) -d ${delay} "${img_path}/${3}";
        elif [[ $2 == "fullscreenAll" ]]; then maim -d ${delay} "${img_path}/${3}"; fi
    elif [[ $1 == "nodelay" ]]; then
        if [[ $2 == "area" ]]; then maim -s -w $(xininfo -mon-width) -h $(xininfo -mon-height) -x $(xininfo -mon-x) -y $(xininfo -mon-y) "${img_path}/${3}";
        elif [[ $2 == "fullscreen" ]]; then maim -w $(xininfo -mon-width) -h $(xininfo -mon-height) -x $(xininfo -mon-x) -y $(xininfo -mon-y) "${img_path}/${3}";
        elif [[ $2 == "fullscreenAll" ]]; then maim "${img_path}/${3}"; fi
    fi
}

askPrompt () {
    filename="$(cat /tmp/__teiler_cast_name)"
    isRecording && STATE_RECORDING="Recording"
    if [[ -z "$STATE_RECORDING" ]]; then
        filename="${vid_filemask}"
        echo "${filename}" > /tmp/__teiler_cast_name
        menu=$(echo -e "< Exit\n---\n1 Fullscreen\n2 Area" | rofi -dmenu -p "> ")
        if [[ $menu == "1 Fullscreen" ]]; then isRecording && stopRecording && sleep 2 || ffmpegCmd fullscreen;
        elif [[ $menu == "2 Area" ]]; then isRecording && stopRecording && sleep 2 || ffmpegCmd area;
        elif [[ $menu == "" ]]; then exit
        fi
    else
        isRecording && stopRecording && sleep 2
        ask=$(echo -e "1 Yes\n2 No" | rofi -dmenu -p "Upload? > ")
        if [[ $ask == "1 Yes" ]]; then cd "${vid_path}" && teiler_helper --upload video "${filename}" && rm -f /tmp/__teiler_cast_name;
        elif [[ $ask == "2 No" ]]; then rm -f /tmp/__teiler_cast_name;
        fi
    fi
}

clipCmd () {
    x_clip
    (xclip -o) > "${paste_path}/${paste_filemask}"
}

delayPrompt () {
    delay=$(echo -e "< Return $(seq 0 10)" | rofi -dmenu -p "Choose Delay > ")
}

indicator () {
    echo "$rec_text" | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" \
    -x $(( ( $(xininfo -mon-width)-120)/2 )) -xs $(echo $(( $(xininfo -active-mon) + 1 ))) -p &
    echo "$!" > "$INDICATOR_PIDFILE"
}

killCountdown () { kill $DELAY_PID; }

countdown () { for i in $(seq $[$1-1] -1 0); do for o in {9..0}; do echo $i.$o; sleep 0.1; done; done }

progress () {
    $(echo $gdbar_binary) -min $1 -max $2 -w 100 -h 8 | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w 120 \
    -x $(( ( $(xininfo -mon-width)-120)/2 )) -xs $(echo $(( $(xininfo -active-mon) + 1 ))) -p 1
}

helpCmd () {
    cat << EOF
teiler - a rofi-driven screen{shot,cast} utility
(C) Rasmus Steinke <rasi@xssn.at>
--screenshots             open screenshots menu
--screencasts             open screencasts menu
--history {images,video}  open history menus
--paste                   upload text from clipboard
--togglecast              start/stop screencast
--quick {area,fullscreen} quickly create screenshot and upload
EOF
}

if [[ $1 == "--screenshot" ]]; then screenshotMenu
elif [[ $1 == "--screencast" ]]; then screencastMenu
elif [[ $1 == "--paste" ]]; then export filename="${paste_filemask}" && clipCmd && teiler_helper --upload text "${filename}"
elif [[ $1 == "--togglecast" ]]; then askPrompt
elif [[ $1 == "--history" ]]; then
    if [[ $2 == "images" ]]; then imageMenu
    elif [[ $2 == "videos" ]]; then videoMenu
    fi
elif [[ $1 == "--quick" ]]; then
    if [[ $2 == "area" ]]; then maimCmd nodelay area "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}"
    elif [[ $2 == "fullscreen" ]]; then maimCmd nodelay fullscreen "${filename}" && cd "${img_path}" && teiler_helper --upload image "${filename}"
    fi
elif [[ $1 == "--help" ]]; then
    helpCmd
else
    mainMenu
fi

