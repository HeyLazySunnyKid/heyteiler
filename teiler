#!/bin/zsh

function prompt {
    PROMPT_RESULT=$(echo ${(j:\n:)@} | $BACKEND ${(P)BACKEND} -p ${prompt_txt:-Teiler})
    [[ "$PROMPT_RESULT" =~ "[0-9]+" ]] && echo $MATCH
}

function mainMenu {
    prompt_txt='Teiler:'
    isRecording && STATE_RECORDING=" 3. Stop recording screencast"
    pmt=(" 0: Cancel"
         " 1. Screenshot (Fullscreen)"
         " 2. Screenshot (Area)"
         ${STATE_RECORDING:-" 3. Record screencast"}
         "---"
         " 4. Upload clipboard content (Delayed)"
         " 5. Copy last image to clipboard"
         " 6. Upload a file"
         ${CUSTOM_MENUS:+' 9. More menus!'})
    case $(prompt $pmt) in
        1) delayPrompt screenshot -d ;;
        2) delayPrompt screenshot -s -d ;;
        3) isRecording && stopRecording || screencast ;;
        4) notImplemented ;;
        5) imgClip ;;
        6) uploadMenu ;;
        *) exit
    esac
}

function uploadMenu {
    pmt=(" 0: << back to Main Menu"
         " 1. Upload last Image"
         " 2. Upload last Video"
         " 3. Image"
         " 4. Video")
    case $(prompt $pmt) in
        1) instantImg ;;
        2) instantVid ;;
        3) uploadImg $(listImg) ;;
        4) uploadVid $(listVid) ;;
        *) mainMenu
    esac
}

function screencast {
    (( $+commands[ffmpeg] && $+commands[xdotool] && $+commands[xwininfo] )) \
        || die "Missing dependencies!"
    isRecording && {
        notify "$time" 'Screencast already in progress'
        die 'Already recording screeen'
    }
    [[ -f "${img_path}/lastvid.webm" ]] && rm "${img_path}/lastvid.webm"
    ffmpeg $encopts "${img_path}/lastvid.webm" &
    >$SCREENCAST_PIDFILE <<< $!
    indicator
    notify "$time" "Screencast started"
}

function indicator {
    echo $rec_text | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" -x "$rec_x" -y "$rec_y" -p &
    >$INDICATOR_PIDFILE <<< $!
}

function stopRecording       {
    local pid
    [[ -f $SCREENCAST_PIDFILE ]] && {
        pid=$(<$SCREENCAST_PIDFILE)
        pid2=$(<$INDICATOR_PIDFILE)
        isRecording && kill "$pid" "$pid2"
        rm "$SCREENCAST_PIDFILE"
        rm "$INDICATOR_PIDFILE"
    }
    notify "$time" "Stopped recording"
    archiveVid
    return 0
}

function delayPrompt {
    prompt_txt='Delay:'
    t=$(prompt 0 2 5 10 20 30 "Cancel")
    [[ "$t" =~ "[0-9]+" ]] || die "Canceled"
    delayCountdown | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" -x "$rec_x" -y "$rec_y" -p $(($t - 1)) &
    [[ $t -gt 2 ]] && notify $time "Screenshot will be taken in $t seconds"
    $@ $[$t+1]
}

function delayCountdown {
    for i in `seq $(($t - 1)) -1 0`; do echo "$i ... GO!"; sleep 1; done
}

function delayClip {
    for i in `seq 10 -1 0`; do echo "$i ... GO!"; sleep 1; done
}

function imgClip {
    imgclip.py "$img_path"/lastimg.png &
    imgPID=$!
    delayClip | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" -x "$rec_x" -y "$rec_y" -p 9 
    kill $imgPID
}

function isRecording {
    [[ -f $SCREENCAST_PIDFILE ]] && \
        [[ "$(pgrep -l -F $SCREENCAST_PIDFILE)" =~ "[0-9]+ ffmpeg" ]]
}

function die { echo "$1"; exit ${2:-1} }

function screenshot {
    (( $+commands[scrot] )) || die "Missing scrot!"
    # imagemagic's import?
    [[ -f "${img_path}/lastimg.png" ]] && rm "${img_path}/lastimg.png"
    scrot $@ "${img_path}/lastimg.png"
    notify "$time" "Screenshot saved"
    archiveImage
}

function notify {
    notify-send -u low --hint=int:transient:1 -t "$1" "Teiler" "$2"
}


function notImplemented {
    notify "$time" "Feature not implemented yet!"
}

function archiveImage {
    [[ "$archive_img" = '1' ]] || return
    mv "${img_path}/lastimg.png" "${img_path}/${filemask}.png"
    ln -s "${img_path}/${filemask}.png" "${img_path}/lastimg.png"
}

function archiveVid {
    [[ "$archive_vid" = '1' ]] || return
    mv "${img_path}/lastvid.webm" "${img_path}/${filemask}.webm"
    ln -s "${img_path}/${filemask}.webm" "${img_path}/lastvid.webm"
}

function listVid {
    prompt_txt='Upload:'
    ls -t -1 "$img_path"/teiler-*.webm | $BACKEND ${(P)BACKEND} -p "Upload"
}

function listImg {
    prompt_txt='Upload:'
    ls -t -1 "$img_path"/teiler-*.png | $BACKEND ${(P)BACKEND} -p "Upload" 
}

function uploadImg {
    if [[ "$ul" == "scp" ]]; then
        scp "$*" "$scp_host":/"$scp_path_img/"
        notify-send "Image Uploaded" "$http_img/$(basename $file)"
        echo -n "$http_img/$(basename $file)" | xclip
    elif [[ "$ul" == "fb" ]]; then
        fb "$*"
        notify-send "Image Uploaded" "$(echo $(xclip -o))"
    fi
}

function uploadVid {
    if [[ "$ul" == "scp" ]]; then
        scp "$*" "$scp_host":/"$scp_path_vid/"
        notify-send "Video Uploaded" "$http_vid/$(basename $file)"
        echo -n "$http_vid/$(basename $file)" | xclip
    elif [[ "$ul" == "fb" ]]; then
        fb "$*"
        notify-send "Video Uploaded" "$(echo $(xclip -o))"
    fi
}   


function instantImg {
    file=$(readlink "$img_path/lastimg.png")
        if [[ "$ul" == scp ]]
        then scp "$file" "$scp_host":/"$scp_path_img/"
        notify-send "Image Uploaded" "$http_img/$(basename $file)"
        echo -n "$http_img/$(basename $file)" | xclip
    elif [[ "$ul" == fb ]]
        then fb "$file"
        notify-send "Image Uploaded" "$(echo $(xclip -o))"
    fi
}

function instantVid {
    file=$(readlink "$img_path/lastvid.webm")
        if [[ "$ul" == scp ]]
        then scp "$file" "$scp_host":/"$scp_path_vid/"
        notify-send "Video Uploaded" "$http_vid/$(basename $file)"
        echo -n "$http_vid/$(basename $file)" | xclip
    elif [[ "$ul" == fb ]]
        then fb "$file"
        notify-send "Video Uploaded" "$(echo $(xclip -o))"
    fi
}


function x_clip {
    x_clip="(xclip -o) | xclip -selection clipboard"
}

TEILERRC="${TEILERRC:-$HOME/.config/teiler/config}"
BACKEND="${BACKEND:-simpleswitcher}"
[[ ! -f "$TEILERRC" ]] && die 'Please configure teiler!'  1
(( $+commands[dmenu] || $+commands[simpleswitcher] )) \
    || die 'Please install either dmenu or simpleswitcher!' 3

source $TEILERRC
mainMenu
