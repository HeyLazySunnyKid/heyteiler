#!/bin/bash
# teiler - A script to share (german word: teilen) screenshots/casts for tiling WMs - Pun intended
# (c) Rasmus Steinke <rasi at xssn dot at>
# Additional Ideas, testing and some code by Zeltak <zeltak at gmail dot com>
#
# Requirements:
# xclip, fb-client, pinta, dzen2, dmenu, ffmpeg, scrot, bc, some notification daemon,
# xfce4-screenshooter+a proper clipboard manager for image clipboard support


#changelog
#v0.9.9.1 Added Screencast indicator. Addec Configuration options for Screencast indicator
#v0.9.9 Restructured Menu. Added Screencasts of single windows.
#v0.9.8 Added scp support. New configuration options URL and ULHOST added defined.
#v0.9.7 Added transparency option for dzen2 (set to 0 if your dzen2 cant handle transparency)
#v0.9.6 Added dependency and config checks
#v0.9.5 outsourced configuration to ~/.config/teiler/config, made dzen2 font be configurable individually
#v0.9.4 fixed typing bug and bump to fake activity :)
#v0.9.3
#Added option to copy image to clipboard. This needs xfce-screenshooter and some proper clipboard manager, like clipman
#v0.9.2
#Added Configuration for transparency
#v0.9.1
#Include Upload Link in Notification
#v0.9
#Massive rewrite of the case function, teiler finally supports spaces in its menu :)
#v0.8
#Put notify-send into its own function, Made delay being calculated from counter value.
#v0.7
#Massive Code Cleanup
#v0.6
#Countdown script stolen from Google and integrated.
#v0.5
#added clip uploading
#v0.4
#added screencast function
#v0.3
#added 1.notifications 2.unique names for each type (for quick launch) 3.better photo editor (pinta) 4.dmenu title

if [[ -f $HOME/.config/teiler/config ]];
  then echo "Config found"
else
  echo "No config found" && notify-send "teiler" "No config found"
  echo "Please copy config.example to ~/.config/teiler/config" && notify-send "Please copy config.example to ~/.config/teiler/config"
  echo "Terminating..."
  echo " "
  killall teiler
fi

if [[ -d $HOME/.local/share/teiler ]];
  then echo "data directory found"
else
  mkdir $HOME/.local/share/teiler
  touch $HOME/.local/share/teiler/temp_cast
  touch $HOME/.local/share/teiler/temppid
fi


command -v dmenu >/dev/null 2>&1 || { notify-send "teiler" "dmenu is  not installed. Aborting." >&2; exit 1; }
command -v dzen2 >/dev/null 2>&1 || { notify-send "teiler" "dzen2 is not installed. Aborting" >&2; exit 1; }

UP1=`command -v scp`
UP2=`command -v fb`
if [[ -n "$UP1" || -n "$UP2" ]];
then echo "found"
else echo "not found" && notify-send "teiler" "No supported Uploader found"; exit
fi

command -v ffmpeg >/dev/null 2>&1 || { notify-send "teiler" "ffmpeg is not installed. Aborting" >&2; exit 1; }
command -v scrot >/dev/null 2>&1 || { notify-send "teiler" "scrot is not installed. Aborting" >&2; exit 1; }
command -v bc >/dev/null 2>&1 || { notify-send "teiler" "bc is not installed. Aborting" >&2; exit 1; }

source ~/.config/teiler/config
echo $FONT
# Needed for the countdown
# Based on some script by  Marco Fontani - MFONTANI at cpan dot org
set -bm
COLOR='#7c7c72'
function countdown () {
    seq 1 ${1:-10} | tac | \
        perl -ne'BEGIN{$|++;$msg=shift}$m=int($_/60);$s=int($_-$m*60);printf("$m:%02d -- $msg\n",$s);sleep 1;' \
        "${2:-ready...}"
}


function archive_img() {
if [ "$ARCHIVE" == "1" ]; then
cp "$IMG_PATH"/lastimg.png "$IMG_PATH"/"$FILEMASK".png
else echo ""
fi
}


# Outsource the notfiy-send to its own function to clean up the mess below a bit ;)
function notify() {
notify-send -u low --hint=int:transient:1 -t ${1} "Scrot" "${2}"
}
function notify_ul() {
if [ $UL == "imgur" ]; 
  then notify-send -u low --hint=int:transient:1 -t ${1} "Scrot" "${2}\n$(xclip -o)\nWARNING: imgur does not support videos"
else
notify-send -u low --hint=int:transient:1 -t ${1} "Scrot" "${2}\n$(xclip -o)"
fi
}

function record() {
coproc rec { 
while true; do
if [[ $(pgrep -f x11grab) ]]
  then
   killall dzen2
   echo "$REC_TEXT" | dzen2 -fn "$REC_FONT" -w $REC_W -x $REC_X -p &
elif [[ $(pgrep -f byzanz-record) ]]
  then
   killall dzen2
   echo "$REC_TEXT" | dzen2 -fn "$REC_FONT" -w $REC_W -x $REC_X -p &
else
   killall dzen2
fi
sleep 1
done;
}
echo "$rec_PID" > ~/.local/share/teiler/temppid
}

NOW=$(date +"%Y%m%d%H%M%S")

#Get Dimensions of active Window
function dimensions() {
  unset x y w h
  eval $(xwininfo -id $(xdotool getactivewindow) |
    sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
           -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
           -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
           -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" )
}


#Some options depending which uploader is used (right now only fb and scp are supported)
	if [ $UL == "fb" ];
 		then UL_IMG="fb -n $(FILEMASK) lastimg.png"
             UL_VID="fb $(cat ~/.local/share/teiler/temp_cast)"
             UL_CLIP="fb clip-$NOW.txt #&& rm -f clip-$NOW.txt"
	elif [ $UL == "scp" ];
        then UL_IMG="echo $(date +"%Y%m%d%H%M%S") > ~/.local/share/teiler/timestamp && scp lastimg.png $ULHOST_IMG/$(cat ~/.local/share/teiler/timestamp).png && echo -n "$URL_IMG/$(cat ~/.local/share/teiler/timestamp).png" | xclip"
             UL_VID="scp $(cat ~/.local/share/teiler/temp_cast) $ULHOST_VID && echo -n "$URL_VID/$(cat ~/.local/share/teiler/temp_cast)" | xclip"
             UL_CLIP="scp clip-$NOW.txt $ULHOST_PASTE && echo -n "$URL_PASTE/clip-$NOW.txt" | xclip"
    elif [ $UL == "imgur" ];
        then UL_IMG="curl -s -F "image=@lastimg.png" -F "key=486690f872c678126a2c09a9e196ce1b" https://imgur.com/api/upload.xml > ~/.local/share/teiler/imgur.xml && xmllint ~/.local/share/teiler/imgur.xml --xpath '//original_image/text\()' | xclip"
	else
		echo "no supported uploader" && notify-send "teiler" "No supported Uploader"
fi

####Some Variables to clean up the code a bit
if [ "$DZEN2_TRANS" == "1" ]; then
COUNTD="countdown $COUNTER1 GO | dzen2 -o 80 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
COUNTD2="countdown $COUNTER2 GO | dzen2 -o 80 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
COUNTD3="countdown $COUNTER3 GO | dzen2 -o 80 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
else 
COUNTD="countdown $COUNTER1 GO | dzen2 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
COUNTD2="countdown $COUNTER2 GO | dzen2 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
COUNTD3="countdown $COUNTER3 GO | dzen2 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
fi
XCLIP="(xclip -o) | xclip -selection clipboard"

cd $IMG_PATH

MENU="1. Screenshots
2. Screenshots (Delayed)
3. Screencasts
---------------------------------
f. Quick Screenshot (Fullscreen)
a. Quick Screenshot (Area)
c. Quick Screencast
x. Upload Clipboard content (Delayed)
k. Stop Recording of any Screencast
i. Copy last image to clipboard
"

if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Screenshots")
MENU="1. Fullscreen
2. Fullscreen and Upload
3. Fullscreen and Edit and Upload
4. Fullscreen to Clipboard
5. Area
6. Area and Upload
7. Area and Edit and Upload
8. Area to Clipboard
"

if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Fullscreen")
     scrot lastimg.png
     archive_img
   ;;
    "2. Fullscreen and Upload")
     scrot -d 1 lastimg.png -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
     archive_img
   ;;
    "3. Fullscreen and Edit and Upload")
    scrot -d 1 lastimg.png -e "$EDIT \$f && $UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
    archive_img
   ;;
    "4. Fullscreen to Clipboard")
    scrot -d 1 lastimg.png
    archive_img
    imgclip.py "$IMG_PATH"/lastimg.png &
    eval $COUNTD3 & sleep $(echo $COUNTER3+1 | bc)
    kill $(pgrep -f imgclip.py)
;;
    "5. Area")
    scrot -s lastimg.png && notify ${TIME} "Screenshot saved"
    archive_img
   ;;
    "6. Area and Upload")
   scrot -s lastimg.png -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
   archive_img
   ;;
    "7. Area and Edit and Upload")
    scrot -s lastimg.png -e "$EDIT \$f && $UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
    archive_img
   ;;
    "8. Area to Clipboard")
    scrot -s lastimg.png
    archive_img
    imgclip.py "$IMG_PATH"/lastimg.png &
    eval $COUNTD3 & sleep $(echo $COUNTER3+1 | bc)
    kill $(pgrep -f imgclip.py)
;;
*)
$0
esac
;;
"2. Screenshots (Delayed)")
MENU="1. Fullscreen
2. Fullscreen and Upload
3. Fullscreen and Edit and Upload
"

if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Fullscreen")
     eval $COUNTD & sleep $(echo $COUNTER1+1 | bc) && scrot -d 1 lastimg.png && notify ${TIME} "Screenshot saved"
     archive_img
   ;;
    "2. Fullscreen and Upload")
    eval $COUNTD & scrot -d $(echo $COUNTER1+1 | bc) lastimg.png -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
    archive_img
   ;;
    "3. Fullscreen and Edit and Upload")
    eval $COUNTD & sleep $(echo $COUNTER1+1 | bc) && scrot -d 1 lastimg.png -e "$EDIT \$f && $UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
    archive_img
   ;;
*)
$0
esac
;;
"3. Screencasts")
MENU="1. Fullscreen
2. Fullscreen (No Sound)
3. Window
4. Window (No Sound)
5. GIF (Fullscreen)
6. GIF (Window)
"
if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Fullscreen")
    rm -f ~/.local/share/teiler/temp_cast && echo "$NOW.webm" > ~/.local/share/teiler/temp_cast && ffmpeg -f x11grab -s $RES -i $DISPLAY+0,0 -f alsa -ac 2 -i pulse -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started" & record &
   ;;
    "2. Fullscreen (No Sound)")
     rm -f ~/.local/share/teiler/temp_cast && echo "$NOW.webm" > ~/.local/share/teiler/temp_cast && ffmpeg -f x11grab -s $RES -i $DISPLAY+0,0 -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started" & record &
   ;;
    "3. Window")
    eval $COUNTD & sleep $(echo $COUNTER1+1 | bc)
    rm -f ~/.local/share/teiler/temp_cast && echo "$NOW.webm" > ~/.local/share/teiler/temp_cast && dimensions && ffmpeg -f x11grab -s "${w}x${h}" -i $DISPLAY+$x,$y -f alsa -ac 2 -i pulse -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started" & record &
   ;;
    "4. Window (No Sound)")
    eval $COUNTD & sleep $(echo $COUNTER1+1 | bc)
    rm -f ~/.local/share/teiler/temp_cast && echo "$NOW.webm" > ~/.local/share/teiler/temp_cast && dimensions && ffmpeg -f x11grab -s "${w}x${h}" -i $DISPLAY+$x,$y -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started" & record &
   ;;
    "5. GIF (Fullscreen)")
   rm -f ~/.local/share/teiler/temp_cast && echo "$NOW.gif" > ~/.local/share/teiler/temp_cast && byzanz-record -d 9999 $NOW.gif && notify ${TIME} "Screencast started" & record &
   ;;
    "6. GIF (Window)")
   eval $COUNTD & sleep $(echo $COUNTER1+1 | bc)
   rm -f ~/.local/share/teiler/temp_cast && echo "$NOW.gif" > ~/.local/share/teiler/temp_cast && dimensions && byzanz-record -x $x -y $y -w $w -h $h -d 9999 $NOW.gif && notify ${TIME} "Screencast started" & record &
   ;;
*)
$0
esac
;;
"f. Quick Screenshot (Fullscreen)")
scrot -d 1 lastimg.png -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
archive_img
;;
"a. Quick Screenshot (Area)")
scrot -s lastimg.png -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
archive_img
;;
"c. Quick Screencast")
rm -f ~/.local/share/teiler/temp_cast && echo "$NOW.webm" > ~/.local/share/teiler/temp_cast && ffmpeg -f x11grab -s $RES -i $DISPLAY+0,0 -f alsa -ac 2 -i pulse -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started" & record &
;;
"x. Upload Clipboard content (Delayed)")
eval $COUNTD2 & sleep $(echo $COUNTER2+1 | bc) && xclip -o > clip-$NOW.txt && eval $UL_CLIP && rm -f clip-$NOW.txt && eval $XCLIP && notify_ul ${TIME} "Clipboard uploaded"
;;
"k. Stop Recording of any Screencast")
if [ $UL == "imgur" ];
  then notify-send "imgur" "imgur does not support videos"
  kill $(pgrep -f x11grab) && kill $(cat ~/.local/share/teiler/temppid)
else 
if [ $(pgrep -f x11grab) ]
      then
            kill $(pgrep -f x11grab) && sleep 3 && eval $UL_VID && eval $XCLIP && notify_ul ${TIME} "Screencast uploaded" && kill $(cat ~/.local/share/teiler/temppid)
    elif [ $(pgrep -f byzanz-record) ]
      then killall byzanz-record && sleep 3 && eval $UL_VID && eval $XCLIP && notify_ul ${TIME} "Screencast uploaded" && kill $(cat ~/.local/share/teiler/temppid)
      else
      echo "foo"
      fi
fi
   ;;
"i. Copy last image to clipboard")
imgclip.py "$IMG_PATH"/lastimg.png &
eval $COUNTD3 & sleep $(echo $COUNTER3+1 | bc)
kill $(pgrep -f imgclip.py)
;;
*)
echo "foo"
esac
