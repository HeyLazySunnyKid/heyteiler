#!/bin/bash
# teiler - A script to share (german word: teilen) screenshots/casts for tiling WMs - Pun intended
# (c) Rasmus Steinke <rasi at xssn dot at>
# Additional Ideas, testing and some code by Zeltak <zeltak at gmail dot com>
#
# Requirements:
# xclip, fb-client, pinta, dzen2, dmenu, ffmpeg, scrot, bc, some notification daemon,
# xfce4-screenshooter+a proper clipboard manager for image clipboard support


#changelog
#v0.9.9 Restructured Menu. Added Screencasts of single windows.
#v0.9.8 Added scp support. New configuration options URL and ULHOST added defined.
#v0.9.7 Added transparency option for dzen2 (set to 0 if your dzen2 cant handle transparency)
#v0.9.6 Added dependency and config checks
#v0.9.5 outsourced configuration to ~/.config/teiler/config, made dzen2 font be configurable individually
#v0.9.4 fixed typing bug and bump to fake activity :)
#v0.9.3
#Added option to copy image to clipboard. This needs xfce-screenshooter and some proper clipboard manager, like clipman
#v0.9.2
#Added Configuration for transparency
#v0.9.1
#Include Upload Link in Notification
#v0.9
#Massive rewrite of the case function, teiler finally supports spaces in its menu :)
#v0.8
#Put notify-send into its own function, Made delay being calculated from counter value.
#v0.7
#Massive Code Cleanup
#v0.6
#Countdown script stolen from Google and integrated.
#v0.5
#added clip uploading
#v0.4
#added screencast function
#v0.3
#added 1.notifications 2.unique names for each type (for quick launch) 3.better photo editor (pinta) 4.dmenu title

if [[ -f $HOME/.config/teiler/config ]];
  then echo "Config found"
else
  echo "No config found" && notify-send "teiler" "No config found"
  echo "Please copy config.example to ~/.config/teiler/config" && notify-send "Please copy config.example to ~/.config/teiler/config"
  echo "Terminating..."
  echo " "
  killall teiler
fi

command -v dmenu >/dev/null 2>&1 || { notify-send "teiler" "dmenu is  not installed. Aborting." >&2; exit 1; }
command -v dzen2 >/dev/null 2>&1 || { notify-send "teiler" "dzen2 is not installed. Aborting" >&2; exit 1; }

UP1=`command -v scp`
UP2=`command -v fb`
if [[ -n "$UP1" || -n "$UP2" ]];
then echo "found"
else echo "not found" && notify-send "teiler" "No supported Uploader found"; exit
fi

command -v ffmpeg >/dev/null 2>&1 || { notify-send "teiler" "ffmpeg is not installed. Aborting" >&2; exit 1; }
command -v scrot >/dev/null 2>&1 || { notify-send "teiler" "scrot is not installed. Aborting" >&2; exit 1; }
command -v bc >/dev/null 2>&1 || { notify-send "teiler" "bc is not installed. Aborting" >&2; exit 1; }

source ~/.config/teiler/config
echo $FONT
# Needed for the countdown
# Based on some script by  Marco Fontani - MFONTANI at cpan dot org
set -bm
COLOR='#7c7c72'
function countdown () {
    seq 1 ${1:-10} | tac | \
        perl -ne'BEGIN{$|++;$msg=shift}$m=int($_/60);$s=int($_-$m*60);printf("$m:%02d -- $msg\n",$s);sleep 1;' \
        "${2:-ready...}"
}


# Outsource the notfiy-send to its own function to clean up the mess below a bit ;)
function notify() {
notify-send -u low --hint=int:transient:1 -t ${1} "Scrot" "${2}"
}
function notify_ul() {
notify-send -u low --hint=int:transient:1 -t ${1} "Scrot" "${2}\n$(xclip -o)"
}

NOW=`date +"%Y%m%d%H%M%S"`

#Get Dimensions of active Window
function dimensions() {
  unset x y w h
  eval $(xwininfo -id $(xdotool getactivewindow) |
    sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
           -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
           -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
           -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" )
}

#Some options depending which uploader is used (right now only fb and scp are supported)
	if [ $UL == "fb" ];
 		then UL_IMG="fb \$f && rm -f \$f"
             UL_VID="fb $(cat ~/.temp_cast)"
             UL_CLIP="fb clip-$NOW.txt && rm -f clip-$NOW.txt"
	elif [ $UL == "scp" ];
		then UL_IMG="scp \$f $ULHOST_IMG && rm -f \$f && echo -n "$URL_IMG/\$f" | xclip"
             UL_VID="scp $(cat ~/.temp_cast) $ULHOST_VID && echo -n "$URL_VID/$(cat ~/.temp_cast)" | xclip"
             UL_CLIP="scp clip-$NOW.txt $ULHOST_PASTE && echo -n "$URL_PASTE/clip-$NOW.txt" | xclip"
	else
		echo "no supported uploader" && notify-send "teiler" "No supported Uploader"
fi

####Some Variables to clean up the code a bit
if [ "$DZEN2_TRANS" == "1" ]; then
COUNTD="countdown $COUNTER1 GO | dzen2 -o 80 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
COUNTD2="countdown $COUNTER2 GO | dzen2 -o 80 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
else 
COUNTD="countdown $COUNTER1 GO | dzen2 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
COUNTD2="countdown $COUNTER2 GO | dzen2 -fn \"$DZEN2_FONT\" -fg \"$NF\" -ta c -w \"$DZEN2_W\" -bg \"$NB\" -x \"$DZEN2_X\" -y \"$DZEN2_Y\""
fi
XCLIP="(xclip -o) | xclip -selection clipboard"

cd $IMG_PATH

MENU="1. Screenshots
2. Screenshots (Delayed)
3. Screencasts
---------------------------------
s. Quick Screenshot
c. Quick Screencast
x. Upload Clipboard content (Delayed)
k. Stop Recording of any Screencast
"

if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Screenshots")
MENU="1. Fullscreen
2. Fullscreen and Upload
3. Fullscreen and Edit and Upload
4. Area
5. Area and Upload
6. Area and Edit and Upload
"

if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Fullscreen")
     scrot -d 1 "$FILEMASK" && notify ${TIME} "Screenshot saved"
   ;;
    "2. Fullscreen and Upload")
     scrot -d 1 "$FILEMASK" -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
   ;;
    "3. Fullscreen and Edit and Upload")
    scrot -d 1 "$FILEMASK" -e "$EDIT \$f && $UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
   ;;
    "4. Area")
    scrot -s "$FILEMASK" && notify ${TIME} "Screenshot saved"
   ;;
    "5. Area and Upload")
   scrot -s "$FILEMASK" -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
   ;;
    "6. Area and Edit and Upload")
    scrot -s "$FILEMASK" -e "$EDIT \$f && $UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
   ;;
*)
teiler
esac
;;
"2. Screenshots (Delayed)")
MENU="1. Fullscreen
2. Fullscreen and Upload
3. Fullscreen and Edit and Upload
"

if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Fullscreen")
     eval $COUNTD & sleep $(echo $COUNTER1+1 | bc) && scrot -d 1 "$FILEMASK" && notify ${TIME} "Screenshot saved"
   ;;
    "2. Fullscreen and Upload")
    eval $COUNTD & scrot -d $(echo $COUNTER1+1 | bc) "$FILEMASK" -e "$UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
   ;;
    "3. Fullscreen and Edit and Upload")
    eval $COUNTD & sleep $(echo $COUNTER1+1 | bc) && scrot -d 1 "$FILEMASK" -e "$EDIT \$f && $UL_IMG" && eval $XCLIP && notify_ul ${TIME} "Screenshot uploaded"
   ;;
*)
teiler
esac
;;
"3. Screencasts")
MENU="1. Fullscreen
2. Fullscreen (No Sound)
3. Window
4. Window (No Sound)
5. GIF (Fullscreen)
6. GIF (Window)
"
if [ "$DMENU_TRANS" == "1" ]; then
CHOICE="$(echo "$MENU" | dmenu -o 0.9 -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
else
CHOICE="$(echo "$MENU" | dmenu -l 20 -fn "$FONT" -nf "$NF" -nb "$NB" -sf "$SF" -sb "$SB" -p "Make Your Wish:")"
fi

  case "$CHOICE" in
    "1. Fullscreen")
    rm -f ~/.temp_cast && echo "$NOW.webm" > ~/.temp_cast && ffmpeg -f x11grab -s $RES -i $DISPLAY+0,0 -f alsa -ac 2 -i pulse -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started"
   ;;
    "2. Fullscreen (No Sound)")
     rm -f ~/.temp_cast && echo "$NOW.webm" > ~/.temp_cast && ffmpeg -f x11grab -s $RES -i $DISPLAY+0,0 -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started"
   ;;
    "3. Window")
    rm -f ~/.temp_cast && echo "$NOW.webm" > ~/.temp_cast && eval $COUNTD & sleep $(echo $COUNTER1+1 | bc) && dimensions && ffmpeg -f x11grab -s "${w}x${h}" -i $DISPLAY+$x,$y -f alsa -ac 2 -i pulse -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started"
   ;;
    "4. Window (No Sound)")
    rm -f ~/.temp_cast && echo "$NOW.webm" > ~/.temp_cast && eval $COUNTD & sleep $(echo $COUNTER1+1 | bc) && dimensions && ffmpeg -f x11grab -s "${w}x${h}" -i $DISPLAY+$x,$y -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started"
   ;;
    "5. GIF (Fullscreen)")
   rm -f ~/.temp_cast && echo "$NOW.gif" > ~/.temp_cast && byzanz-record -d 9999 $NOW.gif && notify ${TIME} "Screencast started"
   ;;
    "6. GIF (Window)")
   rm -f ~/.temp_cast && echo "$NOW.gif" > ~/.temp_cast && eval $COUNTD & sleep $(echo $COUNTER1+1 | bc) && dimensions && byzanz-record -x $x -y $y -w $w -h $h -d 9999 $NOW.gif && notify ${TIME} "Screencast started"
   ;;
*)
teiler
esac
;;
"s. Quick Screenshot")
scrot -d 1 "$FILEMASK" && notify ${TIME} "Screenshot saved"
;;
"c. Quick Screencast")
rm -f ~/.temp_cast && echo "$NOW.webm" > ~/.temp_cast && ffmpeg -f x11grab -s $RES -i $DISPLAY+0,0 -f alsa -ac 2 -i pulse -r 25 -quality good -cpu-used 0 -b:v 5000k -qmin 10 -qmax 42 -bufsize 1000k -threads 4 $NOW.webm && notify ${TIME} "Screencast started"
;;
"x. Upload Clipboard content (Delayed)")
eval $COUNTD2 & sleep $(echo $COUNTER2+1 | bc) && xclip -o > clip-$NOW.txt && eval $UL_CLIP && rm -f clip-$NOW.txt && eval $XCLIP && notify_ul ${TIME} "Clipboard uploaded"
;;
"k. Stop Recording of any Screencast")
if [ $(pgrep -f x11grab) ]
      then
            kill $(pgrep -f x11grab) && sleep 3 && eval $UL_VID && eval $XCLIP && notify_ul ${TIME} "Screencast uploaded"
    elif [ $(pgrep -f byzanz-record) ]
      then killall byzanz-record && sleep 3 && eval $UL_VID && eval $XCLIP && notify_ul ${TIME} "Screencast uploaded"
      else
      echo "foo"
      fi
   ;;
*)
echo "foo"
esac
