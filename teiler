#!/bin/bash

#########################################################################################################
source $HOME/.config/teiler/config

if [[ "$backend" == "simpleswitcher" ]]
    then function dmenu_t () {
        simpleswitcher -font "$font" -fg "$nf" -bg "$nb" -hlfg "$sf" -hlbg "$sb" -o 90 -bc "$bc" -dmenu "$@"
        }

elif [[ "$backend" == "dmenu" ]]
            then function dmenu_t () {
            dmenu -l 15 -fn "$font" -nf "$nf" -nb "$nb" -sf "$sf" -sb "$sb" -o 90 "$@"
            }
fi
########################################################################################################


# start
mainMenu () {
    isRecording && STATE_RECORDING="3. Stop recording screencast"
    menu=("0: Cancel"
          "1. Screenshot (Fullscreen)"
          "2. Screenshot (Area)"
          "${STATE_RECORDING:-"3. Record screencast"}"
          "---"
          "4. Copy last image to clipboard"
          "5. Upload a File")

    prompt() {
        printf "%s\n" "$@" | dmenu_t -p "Teiler:"
    }

    case "$(prompt "${menu[@]}")" in 
        0:*) exit ;;
        1.*) delayPrompt screenshot -d ;;
        2.*) delayPrompt screenshot -s -d ;;
        3.*) isRecording && stopRecording || screencast ;;
        4.*) imgClip ;;
        5.*) uploadMenu ;;
          *) exit
    esac
}

uploadMenu () {
    menu=("0: << back to Main Menu"
          "1. Upload last Image"
          "2. Upload last Video"
          "3. Image"
          "4. Video")

    prompt() {
        printf "%s\n" "$@" | dmenu_t -p "Teiler:"
    }

       case "$(prompt "${menu[@]}")" in
       0:*) mainMenu ;;
       1.*) instantUpload png "$scp_path_img" "$http_img" ;;
       2.*) instantUpload webm "$scp_path_vid" "$http_vid" ;;
       3.*) upLoad "$(listFiles png)" "$scp_path_img" "$http_img" ;;
       4.*) upLoad "$(listFiles webm)" "$scp_path_vid" "$http_vid" ;;
         *) mainMenu
   esac
}


screencast () {
    type ffmpeg xdotool xwininfo &>/dev/null || { echo "Missing Dependencies"; exit 1; }
    isRecording && {
        notify "$time" 'Screencast already in progress'
        echo "Already recording Screen"; exit 1;
}
    [[ -f "${img_path}/lastvid.webm" ]] && rm "${img_path}/lastvid.webm"
    ffmpeg -f x11grab -s $res -i $ffmpeg_display+$ffmpeg_x_offset,0 $ffaudio $encopts "${img_path}/lastvid.webm" &
    echo "$!" > "$SCREENCAST_PIDFILE"
    indicator
    notify "$time" "Screencast started"
}

indicator () {
    echo "$rec_text" | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" -x "$rec_x" -y "$rec_y" -p &
    echo "$!" > "$INDICATOR_PIDFILE"
}

stopRecording () {
    local pid
    [[ -f $SCREENCAST_PIDFILE ]] && {
        pid=$(cat "$SCREENCAST_PIDFILE")
        pid2=$(cat "$INDICATOR_PIDFILE")
        isRecording && kill "$pid" "$pid2"
        rm "$SCREENCAST_PIDFILE"
        rm "$INDICATOR_PIDFILE"
    }
    notify "$time" "Stopped recording"
    archiveVid
    return 0
}

delayPrompt () {
    t=$(prompt 0 2 5 10 20 30 "Cancel")
    if [[ "$t" = *[[:digit:]]* ]]
        then delayCountdown | dzen2 -fn "$font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" -x "$rec_x" -p 1 &
    else echo "Canceled" && exit 1
    fi
    [[ "$t" -gt 2 ]] && notify "$time" "Screenshot will be taken in $t seconds"
    "$@" $((t+1))
}

delayCountdown () {
for ((n=${1:-t}; n>=0; --n)); do
printf "\n%s " $n
sleep 1
done
printf "\r \r"  # clean up
}

delayClip () {
for ((n=${1:-10}; n>=0; --n)); do  
  printf "\n%s " $n
  sleep 1
done
printf "\r \r"  # clean up
}

imgClip () {
    imgclip.py "$img_path"/lastimg.png &
    imgPID=$!
    delayClip | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" -x "$rec_x" -y "$rec_y" -p 1
    kill "$imgPID"
}

isRecording () {
    [[ -f "$SCREENCAST_PIDFILE" ]] || return 1;
}

screenshot () {
     type scrot &>/dev/null || { echo "Missing scrot!"; exit 1; }
    [[ -f "${img_path}/lastimg.png" ]] && rm "${img_path}/lastimg.png"
    scrot "$@" "${img_path}/lastimg.png"
    notify "$time" "Screenshot saved"
    archiveImage
}

notify () {
    notify-send -u low --hint=int:transient:1 -t "$1" "Teiler" "$2"
}

notImplemented () {
    notify "$time" "Feature not implemented yet!"
}

archiveImage () {
    [[ "$archive_img" = '1' ]] || return
    mv "${img_path}/lastimg.png" "${img_path}/${filemask}.png"
    ln -s "${img_path}/${filemask}.png" "${img_path}/lastimg.png"
}

archiveVid () {
    [[ "$archive_vid" = '1' ]] || return
    mv "${img_path}/lastvid.webm" "${img_path}/${filemask}.webm"
    ln -s "${img_path}/${filemask}.webm" "${img_path}/lastvid.webm"
}

listFiles () {
    ls -t -1 "$img_path"/"$namekey"-*."$1" | dmenu_t -p "Upload"
}

upLoad () {
    if [[ $1 == png ]]
        then file=$(readlink "$img_path/lastimg.png")
        type="Image"
    elif [[ $1 == webm ]]
        then file=$(readlink "$img_path/lastvid.webm")
        type="Video"
    fi
    if [[ "$ul" == "scp" ]]
        then scp "$1" "$scp_host":/"$2/"
        notify-send "$(echo "$type") Uploaded" "$3/$(basename "$1")"
        echo -n "$3/$(basename "$1")" | xclip
    elif [[ "$ul" == "fb" ]]
        then fb "$1"
        notify-send "$(echo "$type") Uploaded" "$(xclip -o)"
    fi
    x_clip
}

instantUpload () {
    if [[ $1 == png ]]
        then file=$(readlink "$img_path/lastimg.png")
             type="Image"
    elif [[ $1 == webm ]]
        then file=$(readlink "$img_path/lastvid.webm")
             type="Video"
    fi
        if [[ "$ul" == scp ]]
        then scp "$file" "$scp_host":/"$2/"
        notify-send "$(echo $type) Uploaded" "$3/$(basename "$file")"
        echo -n "$3/$(basename "$file")" | xclip
    elif [[ "$ul" == fb ]]
        then fb "$file"
        notify-send "$(echo $type) Uploaded" "$(xclip -o)"
    fi
    x_clip
}

x_clip () {
    x_clip="(xclip -o) | xclip -selection clipboard"
}

type dmenu simpleswitcher &>/dev/null || { echo "Missing Dependencies"; exit 1; }


# set default backend options
source "$HOME/.config/teiler/config"

if [[ "$backend" == "simpleswitcher" ]]
    then function dmenu_t () {
        simpleswitcher -font "$font" -fg "$nf" -bg "$nb" -hlfg "$sf" -hlbg "$sb" -o 90 -bc "$bc" -dmenu "$@"
        }

elif [[ "$backend" == "dmenu" ]]
            then function dmenu_t () {
            dmenu -l 15 -fn "$font" -nf "$nf" -nb "$nb" -sf "$sf" -sb "$sb" -o 90 "$@"
            }
fi

mainMenu

